Literal    : INT FLOAT STRING
Operator   : PLUS MINUS TIMES DIVBY POW SQRT NOT
Comparison : EQUALSEQ NOTEQ LSSTHN GRTTHN LSSTHNEQ GRTTHNEQ
Combiner   : AND XOR OR
Type       : TYPE:Str TYPE:Int TYPE:Float TYPE:Bool TYPE:Array TYPE:Func



notraceexpr:
  - KEYWORD:var IDENTIFIER EQUALS expr
  - IDENTIFIER EQUALS expr
  - expr

expr:
  - opexpr

opexpr:
  - call (call (Operator|Comparison|Combiner) | opexpr)*

call:
  - factor LPAREN EOL* (expr (COMMA EOL* expr)*)? EOL* RPAREN
  - factor


factor:
  - (PLUS|MINUS) factor
  - ifexpr
  - forexpr
  - whileexpr
  - funcexpr
  - atom

ifexpr:
  - KEYWORD:if LPAREN EOL* expr EOL* RPAREN codeblock
    (EOL* KEYWORD:elif LPAREN EOL* expr EOL* RPAREN codeblock)*
    (EOL* KEYWORD:else codeblock)?

forexpr:
  - KEYWORD:for IDENTIFIER KEYWORD:in LPAREN EOL* expr EOL* RPAREN codeblock

whileexpr:
  - KEYWORD:while LPAREN EOL* expr EOL* RPAREN codeblock

funcexpr:
  - KEYWORD:func LPAREN EOL* (IDENTIFIER COLON EOL* typeexpr (COMMA EOL* IDENTIFIER COLON EOL* typeexpr)*)? EOL* RPAREN
    COLON typeexpr codeblock

atom:
  - Literal
  - IDENTIFIER
  - arrayexpr

arrayexpr:
  - LSQUARE EOL* (expr
    (COMMA EOL* expr)*)? COMMA? EOL*
    RSQUARE



typeexpr:
  - TYPE:Str
  - TYPE:Int
  - TYPE:Float
  - TYPE:Bool
  - TYPE:Array LSSTHN INT COMMA typeexpr GRTTHN
  //- TYPE:Seq LSSTHN typeexpr GRTTHN
  //- TYPE:Uarray LSSTHN (typeexpr (COMMA typeexpr)*)? GRTTHN
  //- TYPE:Table LSSTHN typeexpr COMMA typeexpr GRTTHN
  //- TYPE:Enum
  //- TYPE:Excep LSSTHN IDENTIFIER GRTTHN
  //- TYPE:Mod LSSTHN IDENTIFIER GRTTHN
  //- TYPE:Struct
  //- TYPE:Impl
  - TYPE:Func LSSTHN LSQUARE (type (COMMA type)*)? RSQUARE COMMA type GRTTHN

codeblock:
  - LCURLY EOL*
    (expr EOL*)*
    RCURLY
