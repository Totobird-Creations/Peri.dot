var periscope = include('periscope')


var pscope_add = func() -> Null {

    var try = handler {print + 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_sub = func() -> Null {

    var try = handler {print - 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_mul = func() -> Null {

    var try = handler {print * 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_div = func() -> Null {

    var try = handler {print / 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_pow = func() -> Null {

    var try = handler {print ^ 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_equals = func() -> Null {

    assert(print == print == True)
    assert(print == throw == False)
    assert(print == 10 == False)

    return(Null)
}


var pscope_notequals = func() -> Null {

    assert(print != print == False)
    assert(print != throw == True)
    assert(print != 10 == True)

    return(Null)
}


var pscope_lessthan = func() -> Null {

    var try = handler {print < 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_ltequals = func() -> Null {

    var try = handler {print <= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_greaterthan = func() -> Null {

    var try = handler {print > 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_gtequals = func() -> Null {

    var try = handler {print >= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_and = func() -> Null {

    var try = handler {print and 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_or = func() -> Null {

    var try = handler {print or 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_not = func() -> Null {

    var try = handler {not print}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_call = func() -> Null {

    assert(range(5, start=1) == [1, 2, 3, 4])

    return(Null)
}


var pscope_tostr = func() -> Null {

    assert(str(print) == '<Built-In Function print>')

    return(Null)
}


var pscope_toint = func() -> Null {

    var try = handler {int(print)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tofloat = func() -> Null {

    var try = handler {float(print)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tobool = func() -> Null {

    var try = handler {bool(print)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toarray = func() -> Null {

    var try = handler {array(print)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_totuple = func() -> Null {

    var try = handler {tuple(print)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_indicie = func() -> Null {

    var try = handler {print[0]}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_attribute = func() -> Null {

    var try = handler {print.attribute}
    assert(try.name == 'AttributeException')

    return(Null)
}
