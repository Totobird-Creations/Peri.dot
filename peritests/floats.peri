var periscope = include('periscope')


var pscope_add = func() -> Null {

    assert(10.1 + 10.6 == 20.7)
    assert(18.5 + 35.2 == 53.7)
    assert(22.8 + 18.1 == 40.9)

    return(Null)
}


var pscope_sub = func() -> Null {

    assert(10.1 - 10.6 == -0.5)
    assert(18.5 - 35.2 == -16.7)
    assert(22.8 - 18.1 == 4.7)

    return(Null)
}


var pscope_mul = func() -> Null {

    assert(10.1 * 10.6 == 107.06)
    assert(18.5 * 35.2 == 651.2)
    assert(22.8 * 18.1 == 412.68)

    return(Null)
}


var pscope_div = func() -> Null {

    assert(10.1 / 5.05 == 2.0)
    assert(18.5 / 37.0 == 0.5)
    assert(68.4 / 22.8 == 3.0)

    var try = handler {10.0 / 0.0}
    assert(try.name == 'OperationException')

    return(Null)
}


var pscope_pow = func() -> Null {

    assert(10.5 ^ 10.0 == 16288946267.774414)
    assert(18.5 ^ 2.0 == 342.25)
    assert(22.1 ^ 0.0 == 1.0)

    return(Null)
}


var pscope_equals = func() -> Null {

    assert(61.46 == 61.46 == True)
    assert(61.46 == 65.46 == False)
    assert(61.46 == 10 == False)

    return(Null)
}


var pscope_notequals = func() -> Null {

    assert(61.46 != 61.46 == False)
    assert(61.46 != 65.46 == True)
    assert(61.46 != 10 == True)

    return(Null)
}


var pscope_lessthan = func() -> Null {

    assert(61.46 < 61.46 == False)
    assert(61.46 < 65.46 == True)
    assert(61.46 < 56.64 == False)

    return(Null)
}


var pscope_ltequals = func() -> Null {

    assert(61.46 <= 61.46 == True)
    assert(61.46 <= 65.46 == True)
    assert(61.46 <= 56.64 == False)

    return(Null)
}


var pscope_greaterthan = func() -> Null {

    assert(61.46 > 61.46 == False)
    assert(61.46 > 65.46 == False)
    assert(61.46 > 56.64 == True)

    return(Null)
}


var pscope_gtequals = func() -> Null {

    assert(61.46 >= 61.46 == True)
    assert(61.46 >= 65.46 == False)
    assert(61.46 >= 56.64 == True)

    return(Null)
}


var pscope_and = func() -> Null {

    var try = handler {10.0 and 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_or = func() -> Null {

    var try = handler {10.0 or 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_not = func() -> Null {

    var try = handler {not 10.0}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_call = func() -> Null {

    var try = handler {10.0()}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tostr = func() -> Null {

    assert(str(10.0) == '10.0')
    assert(str(10.24) == '10.24')

    return(Null)
}


var pscope_toint = func() -> Null {

    assert(int(10.0) == 10)

    var try = handler {int(10.24)}
    assert(try.name == 'ValueException')

    return(Null)
}


var pscope_tofloat = func() -> Null {

    var try = handler {float(10.0)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tobool = func() -> Null {

    var try = handler {bool(10.0)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toarray = func() -> Null {

    var try = handler {array(10.0)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_totuple = func() -> Null {

    var try = handler {tuple(10.0)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_indicie = func() -> Null {

    var try = handler {10.0[0]}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_attribute = func() -> Null {

    assert(10.5.as_ratio() == (21, 2))

    var try = handler {10.0.attribute}
    assert(try.name == 'AttributeException')

    return(Null)
}
