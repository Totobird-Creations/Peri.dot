var periscope = include('periscope')


var greet = func(name: str, emph=1) -> str {
    var text = 'Hello, ' + name + '!'.repeat(emph)
    return(text)
}


var greet2 = func(name: str, emph=1) -> str {
    var text = 'Hello, ' + name + '!'.repeat(emph)
    return(text)
}


var pscope_add = func() -> Null {

    var try = handler {greet + 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_sub = func() -> Null {

    var try = handler {greet - 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_mul = func() -> Null {

    var try = handler {greet * 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_div = func() -> Null {

    var try = handler {greet / 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_pow = func() -> Null {

    var try = handler {greet ^ 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_equals = func() -> Null {

    assert(greet == greet == True)
    assert(greet == greet2 == False)
    assert(greet == 10 == False)

    return(Null)
}


var pscope_notequals = func() -> Null {

    assert(greet != greet == False)
    assert(greet != greet2 == True)
    assert(greet != 10 == True)

    return(Null)
}


var pscope_lessthan = func() -> Null {

    var try = handler {greet < 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_ltequals = func() -> Null {

    var try = handler {greet <= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_greaterthan = func() -> Null {

    var try = handler {greet > 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_gtequals = func() -> Null {

    var try = handler {greet >= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_and = func() -> Null {

    var try = handler {greet and greet}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_or = func() -> Null {

    var try = handler {greet or greet}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_not = func() -> Null {

    var try = handler {not greet}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_call = func() -> Null {

    assert(greet('Peri.dot', emph=10) == 'Hello, Peri.dot!!!!!!!!!!')

    return(Null)
}


var pscope_tostr = func() -> Null {

    assert(str(greet).startswith('<Function greet <') and str(greet).endswith('>>'))

    return(Null)
}


var pscope_toint = func() -> Null {

    var try = handler {int(greet)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tofloat = func() -> Null {

    var try = handler {float(greet)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tobool = func() -> Null {

    var try = handler {bool(greet)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toarray = func() -> Null {

    var try = handler {array(greet)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_totuple = func() -> Null {

    var try = handler {tuple(greet)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_indicie = func() -> Null {

    var try = handler {greet[0]}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_attribute = func() -> Null {

    var try = handler {greet.attribute}
    assert(try.name == 'AttributeException')

    return(Null)
}
