var periscope = include('periscope')


var testid  = id(10)
var testid2 = id(11)


var pscope_add = func() -> Null {

    var try = handler {testid + 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_sub = func() -> Null {

    var try = handler {testid - 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_mul = func() -> Null {

    var try = handler {testid * 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_div = func() -> Null {

    var try = handler {testid / 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_pow = func() -> Null {

    var try = handler {testid ^ 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_equals = func() -> Null {

    assert(testid == testid == True)
    assert(testid == testid2 == False)
    assert(testid == 10 == False)

    return(Null)
}


var pscope_notequals = func() -> Null {

    assert(testid != testid == False)
    assert(testid != testid2 == True)
    assert(testid != 10 == True)

    return(Null)
}


var pscope_lessthan = func() -> Null {

    var try = handler {testid < 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_ltequals = func() -> Null {

    var try = handler {testid <= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_greaterthan = func() -> Null {

    var try = handler {testid > 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_gtequals = func() -> Null {

    var try = handler {testid >= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_and = func() -> Null {

    var try = handler {testid and testid}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_or = func() -> Null {

    var try = handler {testid or testid}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_not = func() -> Null {

    var try = handler {not testid}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_call = func() -> Null {

    var try = handler {testid()}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tostr = func() -> Null {

    assert(str(testid) == str(testid))

    return(Null)
}


var pscope_toint = func() -> Null {

    assert(int(testid) == int(testid))

    return(Null)
}


var pscope_tofloat = func() -> Null {

    var try = handler {float(testid)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tobool = func() -> Null {

    var try = handler {bool(testid)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toarray = func() -> Null {

    var try = handler {array(testid)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_totuple = func() -> Null {

    var try = handler {tuple(testid)}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_indicie = func() -> Null {

    var try = handler {testid[0]}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_attribute = func() -> Null {

    var try = handler {testid.attribute}
    assert(try.name == 'AttributeException')

    return(Null)
}
