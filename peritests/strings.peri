var periscope = include('periscope')


var pscope_add = func() -> Null {

    assert('Hello, ' + 'Periscope!' == 'Hello, Periscope!')

    return(Null)
}


var pscope_sub = func() -> Null {

    var try = handler {'Hello' - 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_mul = func() -> Null {

    var try = handler {'Hello' * 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_div = func() -> Null {

    var try = handler {'Hello' / 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_pow = func() -> Null {

    var try = handler {'Hello' ^ 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_equals = func() -> Null {

    assert('Hello' == 'Hello' == True)
    assert('Hello' == 'World' == False)
    assert('Hello' == 10 == False)

    return(Null)
}


var pscope_notequals = func() -> Null {

    assert('Hello' != 'Hello' == False)
    assert('Hello' != 'World' == True)
    assert('Hello' != 10 == True)

    return(Null)
}


var pscope_lessthan = func() -> Null {

    var try = handler {'Hello' < 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_ltequals = func() -> Null {

    var try = handler {'Hello' <= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_greaterthan = func() -> Null {

    var try = handler {'Hello' > 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_gtequals = func() -> Null {

    var try = handler {'Hello' >= 10}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_and = func() -> Null {

    var try = handler {'Hello' and 'Hello'}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_or = func() -> Null {

    var try = handler {'Hello' or 'Hello'}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_not = func() -> Null {

    var try = handler {not 'Hello'}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_call = func() -> Null {

    var try = handler {'Hello'()}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_tostr = func() -> Null {

    var try = handler {str('Hello')}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toint = func() -> Null {

    assert(int('10') == 10)

    var try = handler {int('10.0')}
    assert(try.name == 'ValueException')

    var try = handler {int('Hello')}
    assert(try.name == 'ValueException')

    return(Null)
}


var pscope_tofloat = func() -> Null {

    assert(float('10.0') == 10.0)

    var try = handler {float('10')}
    assert(try.name == 'ValueException')

    var try = handler {float('.10')}
    assert(try.name == 'ValueException')

    var try = handler {float('10.')}
    assert(try.name == 'ValueException')

    var try = handler {float('1.0.0')}
    assert(try.name == 'ValueException')

    var try = handler {float('Hello')}
    assert(try.name == 'ValueException')

    return(Null)
}


var pscope_tobool = func() -> Null {

    var try = handler {bool('Hello')}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_toarray = func() -> Null {

    assert(array('Hello') == ['H', 'e', 'l', 'l', 'o'])

    return(Null)
}


var pscope_totuple = func() -> Null {

    assert(tuple('Hello') == ('H', 'e', 'l', 'l', 'o'))

    return(Null)
}


var pscope_indicie = func() -> Null {

    assert('Hello'[1] == 'e')

    var try = handler {'Hello'[99]}
    assert(try.name == 'IndexException')

    var try = handler {'Hello'['World']}
    assert(try.name == 'TypeException')

    return(Null)
}


var pscope_attribute = func() -> Null {

    assert('Hello'.lalign(10, fillchar='=') == 'Hello=====')

    var try = handler {'Hello'.lalign(10, fillchar='==')}
    assert(try.name == 'ValueException')

    assert('Hello'.calign(10, fillchar='=') == '==Hello===')

    var try = handler {'Hello'.calign(10, fillchar='==')}
    assert(try.name == 'ValueException')

    assert('Hello'.ralign(10, fillchar='=') == '=====Hello')

    var try = handler {'Hello'.ralign(10, fillchar='==')}
    assert(try.name == 'ValueException')

    var try = handler {'Hello'.attribute}
    assert(try.name == 'AttributeException')

    assert('Hello'.length == 5)
    assert('Peri.dot'.length == 8)

    assert('HeLlO'.to_lower() == 'hello')

    assert('Hello'.repeat(3) == 'HelloHelloHello')

    assert('Hello'.replace('l', 'y') == 'Heyyo')
    assert('Hello'.replace('L', 'y') == 'Hello')

    assert('Hello'.slice(1, -1, 1) == 'ell')
    assert('Hello'.slice(Null, Null, -1) == 'olleH')

    assert('I like Peri.dot a lot'.split('l') == ['I ', 'ike Peri.dot a ', 'ot'])

    return(Null)
}
